#%RAML 1.0
# see https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/
title: Camp Conquer Private API
version: v1
baseUri: https://campconquer.herokuapp.com
mediaType:  application/json

types:
  Player:
    type: object
    properties:
      name: string
      team:
        type: string
        description: "enum: [blue, red] (todo: replace with team_id)"

  Point:
    description: a tuple representing an x,y coordinate on the game map; values are floats
    properties:
      x: number
      y: number

  Game:
    type: object
    description: the setup for a single game
    properties:
      id: number
      pieces:
        type: Piece[]
        description: state of all pieces at the beginning of the game
      locked:
        type: boolean
        description: if true, game setup cannot be changed
      outcome:
        type: Outcome
        description: |
          once game is finished, the results of that game

  Piece:
    type: object
    description: a player's piece and its starting setup
    properties:
      team:
        type: string
      player_name:
        type: string
        description: for display purposes during gameplay (???)
      job:
        type: string
        description: "enum: [striker, bruiser, speedster]"
      role:
        type: string
        description: "enum: [offense, defense]"
      path:
        type: Point[]
        description: |
          for defense, an array with a single element;
          for offense, the path to follow
      speed:
        type: number
      hit_points:
        type: integer
      range:
        type: number
        description: distance of target within which a shot will be launched

  Outcome:
    type: object
    description: the results of a finished game
    properties:
      created: datetime
      winner:
        type: string
        description: team name of winner, or null if a draw
      team_outcomes:
        type: TeamOutcome[]
        description: if played, all the stats for that game; team outcomes should be in alphabetical order by name when returned by server
      match_length:
        type: integer
        description: duration of game in seconds

  TeamOutcome:
    type: object
    description: the results of a finished game for a particular team
    properties:
      team:
        type: string
      takedowns:
        type: integer
        description: count of players on *other* teams who died at this team's hand
      throws:
        type: integer
        description: number of balloons thrown
      pickups:
        type: integer
        description: number of times flag was picked up

/games:
  description: all the games

  get:
    description: get all the games
    responses:
      200:
        body:
          type: Game[]
          description: |
            a list of all games, including stats for those that have been played

  /current:
    description: the currently active game; the one that is about to be played. If there is no currently active game then a new one is created, using the same setup as the previous game.
    get:
      description: |
        get a single game
        client should note the id and use it in further calls
      responses:
        200:
          body:
            type: Game

  /{game_id}:
    description: a single game
    get:
      description: get all the values for a single game, including nested Pieces, Outcome, etc.
      responses:
        200:
          body:
            type: Game

    /lock:
      post:
        description: lock the given game; copies all players' pieces into this game
      delete:
        description: unlock the current game, cancelling the current game and allowing players to update their setup again

    /outcome:
      post:
        description: |
          referee posts the results of the given game
          * the game is now considered played and a new current game is created
        queryParameters:
          outcome: Outcome

/players:
  post:
    description: create a player
      queryParameters:
        name: string

  /{player_name}:
  get:
    description: get a single player
    responses:
      200:
        body:
          type: Player

    /piece:
      post:
        description: |
          change the player's piece for the next game(s) -
          only some attributes are allowed (role, job, path, ...?)
        type: Piece

