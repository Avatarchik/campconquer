#%RAML 1.0
# see https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/
title: Camp Conquer Private API
version: v1
baseUri: https://campconquer.herokuapp.com
mediaType:  application/json

types:
  Player:
    type: object
    properties:
      name: string
      team:
        type: string
        description: "enum: [blue, red]"

  Point:
    description: a tuple representing an x,y coordinate on the game map; values are floats
    properties:
      x: number
      y: number

  # maybe this type needs a better name like “SelectablePath” since the piece’s path does not need “active” or “role”
  Path:
    type: object
    description: |
      for defense, an array with a single element;
      for offense, the path to follow
    properties:
      route: Point[]
      role:
        type: string
        description: "enum: [offense, defense]"
      active:
        type: boolean
        description: is this path currently selectable by players?

  Game:
    type: object
    description: the setup for a single game
    properties:
      id: number
      pieces:
        type: Piece[]
        description: state of all pieces at the beginning of the game
      locked: # to-do: change to state
        type: boolean
        description: if true, game setup cannot be changed
      outcome:
        type: Outcome
        description: |
          once game is finished, the results of that game

  Piece:
    type: object
    description: a player's piece and its starting setup
    properties:
      team:
        type: string
      player_name:
        type: string
        description: for display purposes during gameplay (???)
      body_type:
        type: string
        description: "enum: [gender_neutral_1, gender_neutral_2, male, female]"
      role:
        type: string
        description: "enum: [offense, defense]"
      path: # todo: rename to "route"
        type: Point[]
        description: see Path
      speed:
        type: number
      health:
        type: integer
      range:
        type: number
        description: distance of target within which a shot will be launched
      health_bonus:
        type: number
      speed_bonus:
        type: integer
      range_bonus:
        type: number
      # should owned gear be on Piece or Player?
      gear_owned:
        type: string[]  # should we include a full Gear object instead of just a name?
        description: gear short name
      gear_equipped:
        type: string[]
      ammo:
        type: string[]
        description: list of ammo IDs (balloon, arrow, bomb)

  Gear:
    type: object
    description: all possible gear types, including bonuses etc - editable by admin only
    properties:
      name:
        type: string
        description: the short name, e.g. 'hat1', used for lookup of visual assets and identifying in lists
      gear_type:
        type: string
        description: "enum: [head, shirt, belt, shoes, accessory, pet]"
      display_name:
        type: string
        description: human readable name
      description:
        type: string
        description: longer, visible in store and tooltips
      health_bonus:
        type: number
      speed_bonus:
        type: integer
      range_bonus:
        type: number
      gold:
        type: number
      gems:
        type: number
      level:
        type: number
      asset_name:
        type: string
      icon_name:
        type: string

  Outcome:
    type: object
    description: the results of a finished game
    properties:
      created: datetime
      winner:
        type: string
        description: team name of winner, or null if a draw
      team_outcomes:
        type: TeamOutcome[]
        description: if played, all the stats for that game; team outcomes should be in alphabetical order by name when returned by server
      match_length:
        type: integer
        description: duration of game in seconds
      moves:
        type: string
        description: all the moves and throws, as a huge json string blob :-(

  TeamOutcome:
    type: object
    description: the results of a finished game for a particular team
    properties:
      team:
        type: string
      takedowns:
        type: integer
        description: count of players on *other* teams who died at this team's hand
      throws:
        type: integer
        description: number of balloons thrown
      pickups:
        type: integer
        description: number of times flag was picked up

/gears:
  get:
    description: get all the gears
    responses:
      200:
        body:
          type: Gear[]
          description: |
            a list of all gear types

/games:
  description: all the games

  get:
    description: get all the games
    responses:
      200:
        body:
          type: Game[]
          description: |
            a list of all games, including stats for those that have been played

  /current:
    description: the currently active game; the one that is about to be played. If there is no currently active game then a new one is created, using the same setup as the previous game.
    get:
      description: |
        get a single game
        client should note the id and use it in further calls
      responses:
        200:
          body:
            type: Game

  /previous:
    description: the most recently played game
    get:
      description: |
        get a single game
        client should note the id and use it in further calls
      responses:
        200:
          body:
            type: Game

  /{game_id}:
    description: a single game
    get:
      description: get all the values for a single game, including nested Pieces, Outcome, etc.
      responses:
        200:
          body:
            type: Game

    /lock:
      post:
        description: lock the given game; copies all players' pieces into this game
      delete:
        description: unlock the current game, cancelling the current game and allowing players to update their setup again

    /outcome:
      post:
        description: |
          referee posts the results of the given game
          * the game is now considered played and a new current game is created
        queryParameters:
          outcome: Outcome

/players:

  get:
    description: get all players
    responses:
      200:
        body:
          type: Player[]

  # currently this is done by admin web UI - should remove from API?
  # -- we need a UI that creates *and* auths a player in one flow
  post:
    description: create a player
    queryParameters:
        name: string
        team: string

  /{player_id}:
    # currently this is done by admin web UI - should remove from API?
    put:
      description: update a player - change her team or name only
      queryParameters:
          name: string
          team: string

    get:
      description: get a single player
      responses:
        200:
          body:
            type: Player
            description: some attributes are calculated, like health_bonus

    /buy:
      post:
        description: buy a piece of gear
        queryParameters:
          name: string

    /piece:
      post:
        description: |
          change the player's piece for the next game(s) -
          only some attributes are allowed:
          * role
          * path
          * gear_equipped
          * ammo # this will change once ammo costs money
          some attributes are only settable once:
          * speed
          * health:
          * range

        queryParameters:
          type: Piece

/paths:
  get:
    description: get all paths selectable (or not) by player during setup
    queryParameters:
      active:
        type: boolean
        required: false
        description: if present, only return the active paths
    responses:
      200:
        body:
          type: Path[]
